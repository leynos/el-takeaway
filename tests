#!/usr/bin/env bash
#
# Copyright Â© 2014, David McIntosh <dmcintosh@df12.net>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided this permission
# notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.


# To run these tests, shunit2 should be in a directory included in your
# executable PATH.

# shunit2 is available from:

# http://code.google.com/p/shunit2/

set -u

. ./et

typeset -a tempdirs
typeset old_dir

# If we are running an OS which doesn't include mktemp, use shunit2's internal
# replacement
mkdtemp()
{
    local dir ind

    if which mktemp > /dev/null; then
        dir=$(mktemp -d)
    else
        dir=$(_shunit_mktempDir)
    fi

    echo "${dir}"
}

rmdir_later()
{
    local ind

    ind=0
    [[ -v tempdirs ]] && ind=${#tempdirs[@]}
    tempdirs[${ind}]=$1
    unset ind
}

setUp()
{
    old_dir=$(pwd)
}

test_is_id()
{
    is_id a
    assertFalse "Called with non-id 1" $?
    is_id a12
    assertFalse "Called with non-id 2" $?
    is_id " 1"
    assertFalse "Called with non-id 3" $?
    is_id 3216v
    assertFalse "Called with non-id 4" $?
    is_id 1234567890123
    assertFalse "Called with non-id 5" $?
    is_id 123
    assertTrue "Called with id 1" $?
    is_id 000000123456
    assertTrue "Called with id 2" $?
}

test_filename_or_id()
{
    dir=$(mkdtemp)
    rmdir_later "${dir}"
    touch "post-000000123456.md"
    touch "post-000000123457-fiction.md"
    actual=$(filename_or_id "123456")
    assertTrue "Called with present id 1" $?
    assertEquals "post-000000123456.md" "${actual}"
    actual=$(filename_or_id "123457")
    assertTrue "Called with present id 2" $?
    assertEquals "post-000000123457-fiction.md" "${actual}"
    actual=$(filename_or_id "000000123456")
    assertTrue "Called with present padded id 1" $?
    assertEquals "post-000000123456.md" "${actual}"
    actual=$(filename_or_id "000000123457")
    assertTrue "Called with present padded id 2" $?
    assertEquals "post-000000123457-fiction.md" "${actual}"
    actual=$(filename_or_id "123459")
    assertFalse "Called with absent id" $?
    actual=$(filename_or_id "000000123459")
    assertFalse "Called with absent padded id" $?
    actual=$(filename_or_id "post-000000123456.md")
    assertTrue "Called with present file 1" $?
    assertEquals "post-000000123456.md" "${actual}"
    actual=$(filename_or_id "post-000000123457-fiction.md")
    assertTrue "Called with present file 2" $?
    assertEquals "post-000000123457-fiction.md" "${actual}"
    actual=$(filename_or_id "post-000000123459.md")
    assertFalse "Called with absent file 1" $?
}

test_has_repo()
{
    local dir repo_type

    dir=$(mkdtemp)
    rmdir_later "${dir}"
    mkdir "${dir}/.hg"
    cd ${dir}
    repo_type=$(has_repo)
    assertTrue "Called in directory with hg repository" $?
    assertEquals "hg" "${repo_type}"

    dir=$(mkdtemp)
    rmdir_later "${dir}"
    mkdir "${dir}/.git"
    cd ${dir}
    repo_type=$(has_repo)
    assertTrue "Called in directory with git repository" $?
    assertEquals "git" "${repo_type}"

    dir=$(mkdtemp)
    rmdir_later "${dir}"
    cd ${dir}
    repo_type=$(has_repo)
    assertFalse "Called in directory with no repository" $?
}

test_has_uncommitted_changes()
{
    files=1

    hg()
    {
        (( files )) || return
        if [[ "$1" == "status" ]]; then
            echo "M foo"
        fi
    }

    git()
    {
        (( files )) || return
        if [[ "$1" == "status" ]] && [[ "$2" == "-s" ]]; then
            echo " M foo"
        fi
    }

    has_uncommitted_changes hg
    assertTrue $?
    has_uncommitted_changes git
    assertTrue $?
    files=0
    has_uncommitted_changes hg
    assertFalse $?
    has_uncommitted_changes git
    assertFalse $?
    unset -f hg
    unset -f git
}

test_get_conf()
{
    dir=$(mkdtemp)
    rmdir_later "${dir}"
    cat > "${dir}/.et" << EOF
source = https://ello.co/wtf.json
EOF
    actual=$(get_conf "${dir}/.et" 'foo')
    assertFalse 'Called with invalid key' $?
    actual=$(get_conf "${dir}/.et" 'source')
    assertTrue 'Called with valid key' $?
    assertEquals "https://ello.co/wtf.json" "${actual}"
}

test_write_conf()
{
    dir=$(mkdtemp)
    rmdir_later "${dir}"
    cat > "${dir}/expected" << EOF
source = https://ello.co/wtf.json
EOF
    write_conf "${dir}/actual" "source" "https://ello.co/wtf.json" 
    cmp "${dir}/expected" "${dir}/actual" 
    assertTrue "Expected and actual files should match" $?
}

test_get_filename()
{
    dir=$(mkdtemp)
    rmdir_later "${dir}"
    while read i
    do
        touch "${dir}/$i"
    done << EOF
post-000001141677.md
post-000002587443.md
post-000002871989.md
post-000002840628.md
post-000002127388.md
EOF
    cd "${dir}"
    actual=$(get_filename '1141677')
    assertTrue 'Called with valid id 1' $?
    assertEquals "post-000001141677.md" "${actual}"
    actual=$(get_filename '2840628')
    assertTrue 'Called with valid id 2' $?
    assertEquals "post-000002840628.md" "${actual}"
    actual=$(get_filename '546541251')
    assertFalse 'Called with invalid id' $?
}

test_in_array()
{
    arr=(foo bar qux)
    in_array bar "${arr[@]}"
    assertTrue 'Called with element present' $?
    in_array baz "${arr[@]}"
    assertFalse 'Called with element not present' $?
}

test_file_assets()
{
    dir=$(mkdtemp)
    rmdir_later "${dir}"
    
    cat > "${dir}/post-000000123456.md" << EOF
2014-09-26T15:18:28.027Z
Duis vitae tortor eu magna tincidunt semper sit amet nec odio. Aliquam tincidunt nibh purus, ac consequat erat maximus nec. Ut ultricies pulvinar nibh id ornare. Praesent leo massa, mattis eu ornare non, tincidunt eget est.

{
  "url": "//d324imu86q1bqn.cloudfront.net/uploads/asset/attachment/90210/optimized.jpg",
  "via": "direct",
  "alt": "laserdiscs.jpg",
  "asset_id": 90210
}
Cras pretium porta erat id accumsan. Mauris sodales lectus in tortor eleifend egestas. Cras molestie ac ipsum ut tristique. Vestibulum ac euismod eros. Fusce eget consectetur magna.
EOF
    expected="90210|//d324imu86q1bqn.cloudfront.net/uploads/asset/attachment/90210/optimized.jpg|laserdiscs.jpg"
    actual=$(file_assets "${dir}/post-000000123456.md")
    assertEquals "${expected}" "${actual}"
}

test_retrieve_asset()
{
    dir=$(mkdtemp)
    rmdir_later "${dir}"
    cd "${dir}"
    
    function curl
    {
        assertEquals "$1" "-o"
        assertEquals "$2" "assets/000000123456/90210-laserdisc.jpg"
        assertEquals "$3" "http://example.com/assets/90210/optimized.jpg"
        return 0
    }
    retrieve_asset 000000123456 90210 "http://example.com/assets/90210/optimized.jpg" "laserdisc.jpg"
    unset -f curl

    function curl
    {
        return 1
    }
    retrieve_asset 000000123456 90210 "http://example.com/assets/90210/optimized.jpg" "laserdisc.jpg" 2> /dev/null
    assertEquals 1 $?
    unset -f curl

    touch "assets/000000123456/90210-laserdisc.jpg"
    function curl
    {
        assertTrue "curl should not be called for existing file" 1
        return 0
    }
    retrieve_asset 000000123456 90210 "http://example.com/assets/90210/optimized.jpg" "laserdisc.jpg"
    unset -f curl
}

test_each_asset()
{
    input="\
a|b|c
d|e|f"
    actual=$(echo "${input}" | each_asset echo)
    expected="\
a b c
d e f"
    assertEquals "${expected}" "${actual}"
}

tearDown()
{
    cd "${old_dir}"
}

oneTimeTearDown()
{
    if [[ -v verbose ]]; then
        echo
        echo "Removing directories:"
        echo
        opts=-rvf
    else
        opts=-rf
    fi
    if [[ -v tempdirs ]]; then
        for dir in "${tempdirs[@]}"
        do
            rm ${opts} -- "${dir}"
        done
    fi
}

. $(which shunit2)
